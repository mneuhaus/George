#!/usr/bin/env php
<?php

require 'vendor/autoload.php';

$username = 'mneuhaus';
$repository = 'George';
$skipBuilding = FALSE;
$skipManifestUpdate = FALSE;
$skipRelease = FALSE;
$skipReleaseUpload = FALSE;
// $releaseId = 158990;

echo 'Passwort for ' . $username . ': ';
$password = trim(fgets(STDIN, 4096));

use Herrera\Version\Dumper;
use Herrera\Version\Parser;

$jsonPretty = new Camspiers\JsonPretty\JsonPretty;

$composerMetadata = json_decode(file_get_contents('composer.json'));
$composerMetadata->version = isset($composerMetadata->version) ? $composerMetadata->version : '0.0.0';
$builder = Parser::toBuilder($composerMetadata->version);

if ($skipBuilding === FALSE) {
	if (!file_exists('build')) {
		mkdir('build');
	}

	switch(isset($argv[1]) ? $argv[1] : 'patch') {
		case 'patch': $builder->incrementPatch(); break;
		case 'minor': $builder->incrementMinor(); break;
		case 'major': $builder->incrementMajor(); break;
		default: echo 'unknown version strategy (patch|minor|major)'; exit();
	}

	$composerMetadata->version = Dumper::toString($builder);

	file_put_contents('composer.json', $jsonPretty->prettify($composerMetadata));

	$readme = file_get_contents('Readme.md');
	$releaseFile = 'https://github.com/mneuhaus/George/releases/download/' . $composerMetadata->version . '/george-' . $composerMetadata->version . '.phar';
	$readme = preg_replace('/curl .*george-([0-9\.A-z]*).phar > george.phar/', 'curl -s ' . $releaseFile . ' > george.phar', $readme);
	file_put_contents('Readme.md', $readme);

	echo 'Update and commit version in composer.json' . PHP_EOL;
	system('git add composer.json');
	system('git commit -m "' . $composerMetadata->version . '"');
	echo PHP_EOL;

	echo 'tag current state with provided version number' . PHP_EOL;
	system('git tag "' . $composerMetadata->version . '"');
	echo PHP_EOL;


	echo 'push tags to github' . PHP_EOL;
	system('git push origin master');
	system('git push origin --tags');
	echo PHP_EOL;

	echo 'create new phar' . PHP_EOL;
	system('box build');
	system('rm build/george-current.phar');
	system('cp build/george-' . $composerMetadata->version . '.phar build/george-current.phar');
	echo PHP_EOL;
}

if ($skipManifestUpdate === FALSE) {
	echo 'update manifest' . PHP_EOL;
	$files = scandir('build');

	$manifest = array();

	foreach ($files as $file) {
		if (substr($file, 0, 6) === 'george-') {
			$sha1 = sha1_file('build/' . $file);
			preg_match('/george-([0-9\.]*).phar/', $file, $match);
			if (isset($match[1])) {
				$manifest[] = array(
					'name' => 'george.phar',
					'sha1' => $sha1,
					'url' => 'https://github.com/mneuhaus/george/releases/download/' . $match[1] . '/' . $file,
					// 'url' => 'https://raw.github.com/mneuhaus/george-Versions/master/' . $file,
					'version' => $match[1]
				);
			}
		}
	}

	file_put_contents('releases.json', $jsonPretty->prettify($manifest));

	echo PHP_EOL;

	echo 'commit and push repository' . PHP_EOL;
	system('git add .');
	system('git commit -a -m "Added Version: ' . $composerMetadata->version . '"');
	system('git push origin master');
}

$versionNumber = $composerMetadata->version;
$ch = curl_init();
curl_setopt($ch, CURLOPT_USERAGENT, 'Release Script for ' . $username . '/' . $repository . '');
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_USERPWD, $username . ':' . $password);
curl_setopt($ch, CURLOPT_POST, 1);

if ($skipRelease === FALSE) {
	curl_setopt($ch, CURLOPT_URL, 'https://api.github.com/repos/' . $username . '/' . $repository . '/releases');
	$release = array(
		'tag_name' => $versionNumber,
		'name' => 'Release: ' . $versionNumber
	);
	curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($release));

	$release = json_decode(curl_exec($ch));
	$releaseId = $release->id;
}

if ($skipReleaseUpload === FALSE) {
	$fileName = 'george-' . $versionNumber . '.phar';
	$uri = 'https://uploads.github.com/repos/' . $username . '/' . $repository . '/releases/' . $releaseId . '/assets?name=' . $fileName;

	curl_setopt($ch, CURLOPT_URL, $uri);
	curl_setopt ($ch, CURLOPT_HTTPHEADER, Array("Content-Type: text/plain"));
	curl_setopt($ch, CURLOPT_POSTFIELDS, file_get_contents('build/' . $fileName));

	$result = curl_exec($ch);
	curl_close($ch);
}